mod simple;

use std::cell::{RefCell, RefMut};
use std::convert::TryFrom;
use std::mem::size_of;
use std::result;

use anchor_lang::{self, AccountDeserialize, InstructionData, ToAccountMetas};
use bytemuck::{try_from_bytes, PodCastError};
use solana_program::instruction::Instruction;
use solana_program::pubkey::Pubkey;
use solana_program::rent::Rent;
use solana_program::{keccak, system_instruction, system_program};
use solana_program_test::{BanksClient, BanksClientError, ProgramTest};
use solana_sdk::account::Account;
use solana_sdk::signature::{Keypair, Signer, SignerError};
use solana_sdk::signer::signers::Signers;
use solana_sdk::transaction::Transaction;
use spl_compression::state::ConcurrentMerkleTreeHeader;
use spl_concurrent_merkle_tree::concurrent_merkle_tree::ConcurrentMerkleTree;

use crate::state::metaplex_adapter::MetadataArgs;
use crate::state::request::MintRequest;
use crate::state::TreeConfig;

#[derive(Debug)]
pub enum Error {
    AccountNotFound(Pubkey),
    Anchor(anchor_lang::error::Error),
    BanksClient(BanksClientError),
    Pod(PodCastError),
    Signer(SignerError),
}

pub type Result<T> = result::Result<T, Error>;

pub fn program_test() -> ProgramTest {
    let mut test = ProgramTest::new("mpl_bubblegum", crate::id(), None);
    test.add_program(
        "WRAPYChf58WFCnyjXKJHtrPgzKXgHp6MD9aVDqJBbGh",
        wrapper::id(),
        None,
    );
    test.add_program(
        "GRoLLzvxpxxu2PGNJMMeZPyMxjAUH9pKqxGXV9DGiceU",
        spl_compression::id(),
        None,
    );
    test
}

fn instruction<T, U>(accounts: &T, data: &U) -> Instruction
where
    T: ToAccountMetas,
    U: InstructionData,
{
    Instruction {
        program_id: crate::id(),
        accounts: accounts.to_account_metas(None),
        data: data.data(),
    }
}

// Helper method to copy keypairs for testing, since they don't implement
// `Copy/Clone` themselves (for some good reasons).
pub fn clone_keypair(k: &Keypair) -> Keypair {
    Keypair::from_bytes(k.to_bytes().as_slice()).unwrap()
}

// Computes the `data_hash` and `creator_hash`. Taken from the contract code where something
// similar is computed. Needs subsequent cleanup/refactoring.
fn compute_metadata_hashes(metadata_args: &MetadataArgs) -> ([u8; 32], [u8; 32]) {
    let data_hash = crate::hash_metadata(metadata_args).expect("handle error?");

    let creator_data = metadata_args
        .creators
        .iter()
        .map(|c| [c.address.as_ref(), &[c.verified as u8], &[c.share]].concat())
        .collect::<Vec<_>>();

    // Calculate creator hash.
    let creator_hash = keccak::hashv(
        creator_data
            .iter()
            .map(|c| c.as_slice())
            .collect::<Vec<&[u8]>>()
            .as_ref(),
    )
    .to_bytes();

    (data_hash, creator_hash)
}

// Helper object to execute and easily alter characteristics of transactions
// which contain a Bubblegum instruction. There's one instantiation for each
// particular operation (when T and U become concrete types), which are
// aliased a bit further below for convenience. The point of these objects
// is to be easy to set up for the common case of each operation, but at the
// same time easy to tweak via the pub fields and methods (including ones that
// can be added) such that it's easy to validate various test cases.
pub struct TxBuilder<T, U> {
    // This is the accounts structure that holds all the pubkeys, and for
    // each particular op we'll use the one generated by Anchor.
    //
    // TODO: IIRC some of the instructions use additional accounts for
    // some specific semantics; Add an option to specifiy those extra
    // accounts as well if necessary.
    pub accounts: T,
    // Similar to the above, but for instruction data.
    pub data: U,
    // The currently configured payer for the tx.
    pub payer: Pubkey,
    // Using `RefCell` to provide interior mutability and circumvent some
    // annoyance with the borrow checker (i.e. provide helper methods that
    // only need &self, vs &mut self); if we'll ever need to use this
    // in a context with multiple threads, we can just replace the wrapper
    // with a `Mutex`.
    client: RefCell<BanksClient>,
    // Currently configured signers for the tx. Using only `Keypair`s as
    // signers for now; can make this more generic if needed.
    signers: Vec<Keypair>,
}

impl<T, U> TxBuilder<T, U>
where
    T: ToAccountMetas,
    U: InstructionData,
{
    fn client(&self) -> RefMut<BanksClient> {
        self.client.borrow_mut()
    }

    pub async fn execute(&self) -> Result<()> {
        let recent_blockhash = self
            .client()
            .get_latest_blockhash()
            .await
            .map_err(Error::BanksClient)?;

        let ix = instruction(&self.accounts, &self.data);

        let mut tx = Transaction::new_with_payer(&[ix], Some(&self.payer));

        // Using `try_partial_sign` to avoid panics (and get an error when something is
        // wrong instead) no matter what signers are configured.
        tx.try_partial_sign(&self.signers.iter().collect::<Vec<_>>(), recent_blockhash)
            .map_err(Error::Signer)?;

        self.client()
            .process_transaction(tx)
            .await
            .map_err(Error::BanksClient)
    }

    // Returning `&mut Self` to allow method chaining.
    pub fn set_signers(&mut self, signers: &[&Keypair]) -> &mut Self {
        self.signers = signers.iter().map(|k| clone_keypair(k)).collect();
        self
    }

    pub fn set_payer(&mut self, key: Pubkey) -> &mut Self {
        self.payer = key;
        self
    }
}

// The types below have "builder" in their names because we're essentially
// implementing a lightweight builder patter to instantiate, customize, and
// execute transactions.
pub type CreateBuilder = TxBuilder<crate::accounts::CreateTree, crate::instruction::CreateTree>;

pub type MintV1Builder = TxBuilder<crate::accounts::MintV1, crate::instruction::MintV1>;

pub type SetDefaultMintRequestBuilder =
    TxBuilder<crate::accounts::SetDefaultMintRequest, crate::instruction::CreateDefaultMintRequest>;

pub type ApproveMintRequestBuilder =
    TxBuilder<crate::accounts::ApproveMintRequest, crate::instruction::ApproveMintAuthorityRequest>;

pub type BurnBuilder = TxBuilder<crate::accounts::Burn, crate::instruction::Burn>;

pub type TransferBuilder = TxBuilder<crate::accounts::Transfer, crate::instruction::Transfer>;

pub type DelegateBuilder = TxBuilder<crate::accounts::Delegate, crate::instruction::Delegate>;

pub type SetTreeDelegateBuilder =
    TxBuilder<crate::accounts::SetTreeDelegate, crate::instruction::SetTreeDelegate>;

pub type VerifyCreatorBuilder =
    TxBuilder<crate::accounts::CreatorVerification, crate::instruction::VerifyCreator>;

pub type UnverifyCreatorBuilder =
    TxBuilder<crate::accounts::CreatorVerification, crate::instruction::UnverifyCreator>;

pub struct LeafArgs {
    pub owner: Keypair,
    pub delegate: Keypair,
    pub metadata: MetadataArgs,
    pub nonce: u64,
    pub index: u32,
}

impl Clone for LeafArgs {
    fn clone(&self) -> Self {
        LeafArgs {
            owner: clone_keypair(&self.owner),
            delegate: clone_keypair(&self.delegate),
            metadata: self.metadata.clone(),
            nonce: self.nonce,
            index: self.index,
        }
    }
}

impl LeafArgs {
    // Creates a new object with some default values.
    pub fn new(owner: &Keypair, metadata: MetadataArgs) -> Self {
        LeafArgs {
            owner: clone_keypair(owner),
            delegate: clone_keypair(owner),
            metadata,
            nonce: 0,
            index: 0,
        }
    }
}

// A convenience object that records some of the parameters for compressed
// trees and generates TX builders with the default configuration for each
// operation.
// TODO: finish implementing all operations.
pub struct Tree<const MAX_DEPTH: usize, const MAX_BUFFER_SIZE: usize> {
    pub tree_creator: Keypair,
    pub tree_delegate: Keypair,
    pub merkle_roll: Keypair,
    pub canopy_depth: u32,
    client: RefCell<BanksClient>,
}

impl<const MAX_DEPTH: usize, const MAX_BUFFER_SIZE: usize> Tree<MAX_DEPTH, MAX_BUFFER_SIZE> {
    // This and `with_creator` use a bunch of defaults; things can be
    // customized some more via the public access, or we can add extra
    // methods to make things even easier.
    pub fn new(client: BanksClient) -> Self {
        Self::with_creator(&Keypair::new(), client)
    }

    pub fn with_creator(tree_creator: &Keypair, client: BanksClient) -> Self {
        Tree {
            tree_creator: clone_keypair(tree_creator),
            tree_delegate: clone_keypair(tree_creator),
            merkle_roll: Keypair::new(),
            canopy_depth: 0,
            client: RefCell::new(client),
        }
    }

    pub fn creator_pubkey(&self) -> Pubkey {
        self.tree_creator.pubkey()
    }

    pub fn delegate_pubkey(&self) -> Pubkey {
        self.tree_delegate.pubkey()
    }

    pub fn roll_pubkey(&self) -> Pubkey {
        self.merkle_roll.pubkey()
    }

    pub fn authority(&self) -> Pubkey {
        Pubkey::find_program_address(&[self.roll_pubkey().as_ref()], &crate::id()).0
    }

    pub fn mint_authority_request(&self, authority: &Pubkey) -> Pubkey {
        Pubkey::find_program_address(
            &[self.roll_pubkey().as_ref(), authority.as_ref()],
            &crate::id(),
        )
        .0
    }

    pub fn merkle_roll_account_size(&self) -> usize {
        size_of::<ConcurrentMerkleTreeHeader>()
            + size_of::<ConcurrentMerkleTree<MAX_DEPTH, MAX_BUFFER_SIZE>>()
    }

    pub fn client(&self) -> RefMut<BanksClient> {
        self.client.borrow_mut()
    }

    // Helper method to execute a transaction with the specified arguments
    // (i.e. single instruction) via the inner Banks client.
    pub async fn process_tx<T: Signers>(
        &self,
        instruction: Instruction,
        payer: &Pubkey,
        signing_keypairs: &T,
    ) -> Result<()> {
        let recent_blockhash = self
            .client()
            .get_latest_blockhash()
            .await
            .map_err(Error::BanksClient)?;

        self.client()
            .process_transaction(Transaction::new_signed_with_payer(
                &[instruction],
                Some(payer),
                signing_keypairs,
                recent_blockhash,
            ))
            .await
            .map_err(Error::BanksClient)
    }

    pub async fn rent(&self) -> Result<Rent> {
        self.client().get_rent().await.map_err(Error::BanksClient)
    }

    // Allocates and pays for an account to hold the tree.
    pub async fn alloc(&self, payer: &Keypair) -> Result<()> {
        let rent = self.rent().await?;
        let account_size = self.merkle_roll_account_size();

        // u64 -> usize conversion should never fail on the platforms we're running on.
        let lamports = rent.minimum_balance(usize::try_from(account_size).unwrap());

        let ix = system_instruction::create_account(
            &payer.pubkey(),
            &self.roll_pubkey(),
            lamports,
            // The `usize -> u64` conversion should never fail.
            u64::try_from(account_size).unwrap(),
            &spl_compression::id(),
        );

        self.process_tx(ix, &payer.pubkey(), &[payer, &self.merkle_roll])
            .await
    }

    // Helper fn to instantiate the various `TxBuilder` based concrete types
    // associated with each operation.
    fn tx_builder<T, U>(
        &self,
        accounts: T,
        data: U,
        payer: Pubkey,
        default_signers: &[&Keypair],
    ) -> TxBuilder<T, U> {
        let def_signers = default_signers.iter().map(|k| clone_keypair(k)).collect();

        TxBuilder {
            accounts,
            data,
            payer,
            client: self.client.clone(),
            signers: def_signers,
        }
    }

    // The `operation_tx` method instantiate a default builder object for a
    // transaction that can be used to execute that particular operation (tree
    // create in this case). The object can be modified (i.e. to use a
    // different signer, payer, accounts, data, etc.) before execution.
    // Moreover executions don't consume the builder, which can be modified
    // some more and executed again etc.
    pub fn create_tx(&self, payer: &Keypair) -> CreateBuilder {
        let accounts = crate::accounts::CreateTree {
            authority: self.authority(),
            payer: payer.pubkey(),
            tree_creator: self.creator_pubkey(),
            candy_wrapper: wrapper::id(),
            system_program: system_program::id(),
            compression_program: spl_compression::id(),
            merkle_tree: self.roll_pubkey(),
        };

        // The conversions below should not fail.
        let data = crate::instruction::CreateTree {
            max_depth: u32::try_from(MAX_DEPTH).unwrap(),
            max_buffer_size: u32::try_from(MAX_BUFFER_SIZE).unwrap(),
        };

        self.tx_builder(accounts, data, payer.pubkey(), &[payer])
    }

    // Shorthand method for executing a create tree tx with the default config
    // defined in the `_tx` method.
    pub async fn create(&self, payer: &Keypair) -> Result<()> {
        self.create_tx(payer).execute().await
    }

    pub fn mint_v1_tx(&self, mint_authority: Pubkey, args: &LeafArgs) -> MintV1Builder {
        let accounts = crate::accounts::MintV1 {
            mint_authority,
            authority: self.authority(),
            candy_wrapper: wrapper::id(),
            compression_program: spl_compression::id(),
            owner: args.owner.pubkey(),
            delegate: args.delegate.pubkey(),
            mint_authority_request: self.mint_authority_request(&mint_authority),
            merkle_tree: self.roll_pubkey(),
        };

        let data = crate::instruction::MintV1 {
            message: args.metadata.clone(),
        };

        self.tx_builder(
            accounts,
            data,
            args.owner.pubkey(),
            &[&args.owner, &self.tree_creator],
        )
    }

    // This assumes the owner is the account paying for the tx. We can make things
    // more configurable for any of the methods.
    pub async fn mint_v1(&self, mint_authority: Pubkey, args: &LeafArgs) -> Result<()> {
        self.mint_v1_tx(mint_authority, args).execute().await
    }

    pub fn set_default_mint_request_tx(&self, mint_capacity: u64) -> SetDefaultMintRequestBuilder {
        let tree_authority = self.authority();

        let accounts = crate::accounts::SetDefaultMintRequest {
            mint_authority_request: self.mint_authority_request(&tree_authority),
            payer: self.creator_pubkey(),
            creator: self.creator_pubkey(),
            tree_authority,
            system_program: system_program::id(),
            merkle_tree: self.roll_pubkey(),
        };

        let data = crate::instruction::CreateDefaultMintRequest { mint_capacity };

        self.tx_builder(accounts, data, self.creator_pubkey(), &[&self.tree_creator])
    }

    pub async fn set_default_mint_request(&self, mint_capacity: u64) -> Result<()> {
        self.set_default_mint_request_tx(mint_capacity)
            .execute()
            .await
    }

    pub fn approve_mint_request_tx(
        &self,
        mint_authority_request: Pubkey,
        num_mints_to_approve: u64,
    ) -> ApproveMintRequestBuilder {
        let accounts = crate::accounts::ApproveMintRequest {
            mint_authority_request,
            tree_delegate: self.delegate_pubkey(),
            tree_authority: self.authority(),
            merkle_tree: self.roll_pubkey(),
        };

        let data = crate::instruction::ApproveMintAuthorityRequest {
            num_mints_to_approve,
        };

        self.tx_builder(
            accounts,
            data,
            self.delegate_pubkey(),
            &[&self.tree_delegate],
        )
    }

    pub async fn approve_mint_request(
        &self,
        mint_authority_request: Pubkey,
        num_mints_to_approve: u64,
    ) -> Result<()> {
        self.approve_mint_request_tx(mint_authority_request, num_mints_to_approve)
            .execute()
            .await
    }

    pub async fn decode_root(&self) -> Result<[u8; 32]> {
        let mut roll_account = self.read_account(self.roll_pubkey()).await?;

        let merkle_roll_bytes = roll_account.data.as_mut_slice();
        let (_header_bytes, rest) =
            merkle_roll_bytes.split_at_mut(size_of::<ConcurrentMerkleTreeHeader>());

        let merkle_roll_size = size_of::<ConcurrentMerkleTree<MAX_DEPTH, MAX_BUFFER_SIZE>>();
        let roll_bytes = &mut rest[..merkle_roll_size];

        let roll = try_from_bytes::<ConcurrentMerkleTree<MAX_DEPTH, MAX_BUFFER_SIZE>>(roll_bytes)
            .map_err(Error::Pod)?;
        let root = roll.change_logs[roll.active_index as usize].root;

        Ok(root)
    }

    // This is currently async due to calling `decode_root` (same goes for a bunch of others).
    pub async fn burn_tx(&self, args: &LeafArgs) -> Result<BurnBuilder> {
        let root = self.decode_root().await?;

        let (data_hash, creator_hash) = compute_metadata_hashes(&args.metadata);

        let accounts = crate::accounts::Burn {
            authority: self.authority(),
            candy_wrapper: wrapper::id(),
            compression_program: spl_compression::id(),
            owner: args.owner.pubkey(),
            delegate: args.delegate.pubkey(),
            merkle_tree: self.roll_pubkey(),
        };

        let data = crate::instruction::Burn {
            root,
            data_hash,
            creator_hash,
            nonce: args.nonce,
            index: args.index,
        };

        Ok(self.tx_builder(accounts, data, args.owner.pubkey(), &[&args.owner]))
    }

    pub async fn burn(&self, args: &LeafArgs) -> Result<()> {
        self.burn_tx(args).await?.execute().await
    }

    pub async fn verify_creator_tx(
        &self,
        args: &LeafArgs,
        creator: &Keypair,
    ) -> Result<VerifyCreatorBuilder> {
        let root = self.decode_root().await?;
        let (data_hash, creator_hash) = compute_metadata_hashes(&args.metadata);

        let accounts = crate::accounts::CreatorVerification {
            authority: self.authority(),
            owner: args.owner.pubkey(),
            delegate: args.delegate.pubkey(),
            payer: creator.pubkey(),
            creator: creator.pubkey(),
            candy_wrapper: wrapper::id(),
            compression_program: spl_compression::id(),
            merkle_tree: self.roll_pubkey(),
        };

        let data = crate::instruction::VerifyCreator {
            root,
            data_hash,
            creator_hash,
            nonce: args.nonce,
            index: args.index,
            message: args.metadata.clone(),
        };

        Ok(self.tx_builder(accounts, data, creator.pubkey(), &[creator]))
    }

    pub async fn verify_creator(&self, args: &LeafArgs, creator: &Keypair) -> Result<()> {
        self.verify_creator_tx(args, creator).await?.execute().await
    }

    pub async fn unverify_creator_tx(
        &self,
        args: &LeafArgs,
        creator: &Keypair,
    ) -> Result<UnverifyCreatorBuilder> {
        let root = self.decode_root().await?;
        let (data_hash, creator_hash) = compute_metadata_hashes(&args.metadata);

        let accounts = crate::accounts::CreatorVerification {
            authority: self.authority(),
            owner: args.owner.pubkey(),
            delegate: args.delegate.pubkey(),
            payer: creator.pubkey(),
            creator: creator.pubkey(),
            candy_wrapper: wrapper::id(),
            compression_program: spl_compression::id(),
            merkle_tree: self.roll_pubkey(),
        };

        let data = crate::instruction::UnverifyCreator {
            root,
            data_hash,
            creator_hash,
            nonce: args.nonce,
            index: args.index,
            message: args.metadata.clone(),
        };

        Ok(self.tx_builder(accounts, data, creator.pubkey(), &[creator]))
    }

    pub async fn unverify_creator(&self, args: &LeafArgs, creator: &Keypair) -> Result<()> {
        self.unverify_creator_tx(args, creator)
            .await?
            .execute()
            .await
    }

    pub async fn transfer_tx(&self, args: &LeafArgs, new_owner: Pubkey) -> Result<TransferBuilder> {
        let root = self.decode_root().await?;
        let (data_hash, creator_hash) = compute_metadata_hashes(&args.metadata);

        let accounts = crate::accounts::Transfer {
            authority: self.authority(),
            owner: args.owner.pubkey(),
            delegate: args.delegate.pubkey(),
            new_owner,
            candy_wrapper: wrapper::id(),
            compression_program: spl_compression::id(),
            merkle_tree: self.roll_pubkey(),
        };

        let data = crate::instruction::Transfer {
            root,
            data_hash,
            creator_hash,
            nonce: args.nonce,
            index: args.index,
        };

        Ok(self.tx_builder(accounts, data, args.owner.pubkey(), &[&args.owner]))
    }

    pub async fn transfer(&self, args: &LeafArgs, new_owner: Pubkey) -> Result<()> {
        self.transfer_tx(args, new_owner).await?.execute().await
    }

    pub async fn delegate_tx(
        &self,
        args: &LeafArgs,
        new_delegate: Pubkey,
    ) -> Result<DelegateBuilder> {
        let root = self.decode_root().await?;
        let (data_hash, creator_hash) = compute_metadata_hashes(&args.metadata);

        let accounts = crate::accounts::Delegate {
            authority: self.authority(),
            owner: args.owner.pubkey(),
            previous_delegate: args.delegate.pubkey(),
            new_delegate,
            candy_wrapper: wrapper::id(),
            compression_program: spl_compression::id(),
            merkle_tree: self.roll_pubkey(),
        };

        let data = crate::instruction::Delegate {
            root,
            data_hash,
            creator_hash,
            nonce: args.nonce,
            index: args.index,
        };

        Ok(self.tx_builder(accounts, data, args.owner.pubkey(), &[&args.owner]))
    }

    // Does the prev delegate need to sign as well?
    pub async fn delegate(&self, args: &LeafArgs, new_delegate: Pubkey) -> Result<()> {
        self.delegate_tx(args, new_delegate).await?.execute().await
    }

    pub fn set_tree_delegate_tx(&self, new_delegate: Pubkey) -> SetTreeDelegateBuilder {
        let accounts = crate::accounts::SetTreeDelegate {
            creator: self.creator_pubkey(),
            new_delegate,
            merkle_tree: self.roll_pubkey(),
            tree_authority: self.authority(),
        };

        let data = crate::instruction::SetTreeDelegate;

        self.tx_builder(accounts, data, self.creator_pubkey(), &[&self.tree_creator])
    }

    pub async fn set_tree_delegate(&mut self, new_delegate: &Keypair) -> Result<()> {
        self.set_tree_delegate_tx(new_delegate.pubkey())
            .execute()
            .await?;
        self.tree_delegate = clone_keypair(new_delegate);
        Ok(())
    }

    // The following methods provide convenience when reading data from accounts.
    async fn read_account(&self, key: Pubkey) -> Result<Account> {
        self.client()
            .get_account(key)
            .await
            .map_err(Error::BanksClient)?
            .ok_or(Error::AccountNotFound(key))
    }

    // This reads the `Account`, but also deserializes the data to return
    // the strongly typed inner contents.
    pub async fn read_account_data<T>(&self, key: Pubkey) -> Result<T>
    where
        T: AccountDeserialize,
    {
        self.read_account(key)
            .await
            .and_then(|acc| T::try_deserialize(&mut acc.data.as_slice()).map_err(Error::Anchor))
    }

    pub async fn read_tree_config(&self) -> Result<TreeConfig> {
        self.read_account_data(self.authority()).await
    }

    pub async fn read_mint_authority_request(&self, authority: &Pubkey) -> Result<MintRequest> {
        self.read_account_data(self.mint_authority_request(authority))
            .await
    }
}
